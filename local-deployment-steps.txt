# Next.js Deployment Guide

## Authentication Steps

To push the changes and trigger the deployment workflow:

1. Generate a Personal Access Token (PAT) in GitHub:
   - Go to GitHub → Settings → Developer settings → Personal access tokens → Tokens (classic)
   - Generate a new token with `repo` scope
   - Copy the token value

2. Set the remote URL with your credentials:
   ```bash
   git remote set-url origin https://YOUR_USERNAME:YOUR_TOKEN@github.com/cymasphere/cymasphere-website.git
   ```

3. Push the changes:
   ```bash
   git push
   ```

## Monitoring Deployment

1. After pushing, go to your GitHub repository
2. Navigate to the "Actions" tab to see the workflow in progress
3. Click on the running "Deploy to AWS Lightsail" workflow to see details
4. Expand the "Deploy to AWS Lightsail" job to see individual steps
5. The "Deploy to AWS Lightsail" step will show real-time logs from your server

## Deployment Best Practices Implemented

1. **Build ID Consistency**
   - Using Git hash for consistent build IDs between deployments

2. **Version Skew Protection**
   - Added deployment ID to prevent issues during deployments

3. **Cache Optimization**
   - Static assets now have proper cache headers

4. **Graceful Shutdowns**
   - Added proper shutdown handler to ensure in-flight requests complete

5. **Zero-Downtime Deployments**
   - Creating a backup of the current container before updating
   - Automatic rollback mechanism if deployment fails

6. **Advanced Container Security**
   - Using Tini as a proper init system for signal forwarding

7. **Build Performance**
   - Added `--no-locks` to Bun installation for faster CI builds

8. **Image Versioning**
   - Docker images tagged with both `:latest` and Git commit hash

## Manual Deployment (if needed)

If you need to deploy manually without pushing to GitHub:

1. SSH into your AWS Lightsail instance
2. Pull the latest image and restart the container:
   ```bash
   docker pull ghcr.io/YOUR_USERNAME/cymasphere-website:latest
   docker stop cymasphere-container
   docker rm cymasphere-container
   docker run -d \
     --name cymasphere-container \
     --restart unless-stopped \
     -p 80:80 \
     -p 443:443 \
     -v ~/cymasphere-data:/data \
     -e NODE_ENV=production \
     -e PORT=80 \
     -e NEXT_PUBLIC_SUPABASE_URL="YOUR_SUPABASE_URL" \
     -e NEXT_PUBLIC_SUPABASE_ANON_KEY="YOUR_SUPABASE_KEY" \
     --cpus=2 \
     --memory=2g \
     ghcr.io/YOUR_USERNAME/cymasphere-website:latest
   ``` 