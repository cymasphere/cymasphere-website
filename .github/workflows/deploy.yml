name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
      
      - name: Create .env.local file for build
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.local
        
      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "App directory:"
          ls -la app || echo "App directory not found!"

      - name: Make build script executable
        run: chmod +x ./build-no-errors.sh
        
      - name: Update Next.js configuration for production
        run: |
          cat > next.config.js << 'EOF'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            output: 'standalone',
            reactStrictMode: true,
            experimental: {
              serverComponentsExternalPackages: ['sharp'],
            },
            // Remove swcMinify option
          };
          
          module.exports = nextConfig;
          EOF
        
      - name: Run enhanced build script
        run: ./build-no-errors.sh
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_SKIP_TYPECHECKING: true
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set lowercase repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create optimized Dockerfile
        run: |
          cat > Dockerfile << 'DOCKERFILE_EOF'
          FROM oven/bun:1 as base

          # Install dependencies
          FROM base AS deps
          WORKDIR /app
          COPY package.json bun.lock ./
          RUN bun install --frozen-lockfile

          # Build the application
          FROM base AS builder
          WORKDIR /app
          COPY --from=deps /app/node_modules ./node_modules
          COPY . .
          
          # Environment variables for build
          ENV NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          ENV NODE_ENV=production
          ENV NEXT_SKIP_TYPECHECKING=true
          ENV NEXT_TELEMETRY_DISABLED=1
          ENV NEXT_LINT=false
          
          # Fix next.config.js to remove incompatible options
          RUN echo 'const nextConfig = { output: "standalone", reactStrictMode: true }; module.exports = nextConfig;' > next.config.js
          
          # Run build command directly
          RUN bun run next build
          
          # Production image
          FROM base AS runner
          WORKDIR /app

          ENV NODE_ENV=production
          ENV NEXT_TELEMETRY_DISABLED=1
          ENV PORT=3000
          ENV HOSTNAME=0.0.0.0

          # Copy entire next folder and node_modules
          COPY --from=builder /app/.next /app/.next
          COPY --from=builder /app/node_modules /app/node_modules
          COPY --from=builder /app/package.json /app/package.json
          COPY --from=builder /app/public /app/public
          COPY --from=builder /app/next.config.js /app/next.config.js

          # Create a direct startup script
          RUN echo '#!/bin/sh' > /app/start.sh && \
              echo 'echo "Starting Next.js server on port 3000..."' >> /app/start.sh && \
              echo 'bun run next start -p 3000' >> /app/start.sh && \
              chmod +x /app/start.sh

          # Set the command to run
          CMD ["/app/start.sh"]
          DOCKERFILE_EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Manual SSH key setup
      - name: Setup SSH key manually
        run: |
          # Debug - check if secrets are available (masked in logs)
          if [ -n "${{ secrets.LIGHTSAIL_SSH_KEY }}" ]; then
            echo "SSH key is defined"
          else
            echo "SSH key is NOT defined"
            exit 1
          fi
          
          if [ -n "${{ secrets.LIGHTSAIL_IP }}" ]; then
            echo "LIGHTSAIL_IP is defined as: ${{ secrets.LIGHTSAIL_IP }}"
          else
            echo "LIGHTSAIL_IP is NOT defined"
            exit 1
          fi
          
          # Setup SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Create a script to properly format the key
          cat > /tmp/format_key.sh << 'EOF'
          #!/bin/bash
          
          # Take the key content from stdin
          key=$(cat)
          
          # Check if the key starts with a recognized format
          if [[ "$key" == "-----BEGIN"* ]]; then
            # It's already in a standard format, output as is
            echo "$key"
          else
            # Try to format as an OpenSSH key
            echo "-----BEGIN OPENSSH PRIVATE KEY-----"
            echo "$key" | fold -w 70
            echo "-----END OPENSSH PRIVATE KEY-----"
          fi
          EOF
          
          chmod +x /tmp/format_key.sh
          
          # Format and save the key
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | /tmp/format_key.sh > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host key
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_IP }} >> ~/.ssh/known_hosts
          
          # Debug SSH key
          echo "SSH key file permissions:"
          ls -la ~/.ssh/
          echo "First and last lines of SSH key file (for format check):"
          head -n 1 ~/.ssh/id_rsa
          tail -n 1 ~/.ssh/id_rsa
          
          # Test key format with ssh-keygen
          echo "Testing key format:"
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Key format check failed - will try to fix"
          
          # If the key format check failed, try more aggressive fixes
          if ! ssh-keygen -l -f ~/.ssh/id_rsa &>/dev/null; then
            echo "Attempting to fix key format..."
            
            # Try to determine if it's base64 encoded
            if [[ $(echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | base64 -d 2>/dev/null | head -c 20) == "-----BEGIN"* ]]; then
              echo "Key appears to be base64 encoded, decoding..."
              echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
            else
              # Try to wrap the key in RSA format
              echo "Trying RSA format..."
              echo "-----BEGIN RSA PRIVATE KEY-----" > ~/.ssh/id_rsa
              echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | grep -v "BEGIN\|END" | fold -w 64 >> ~/.ssh/id_rsa
              echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
            fi
            
            # Check if the fix worked
            ssh-keygen -l -f ~/.ssh/id_rsa || echo "Key format still problematic"
          fi

      - name: Create deployment script
        run: |
          cat > deploy_remote.sh << 'EOL'
          #!/bin/bash
          
          # Setup Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
          fi
          
          # Ensure proper permissions
          sudo usermod -aG docker ubuntu
          sudo chmod 666 /var/run/docker.sock
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Stop and remove any existing container
          docker stop cymasphere-container || true
          docker rm cymasphere-container || true
          
          # Run the new container with proper environment variables
          echo "Starting container..."
          docker run -d --restart unless-stopped --name cymasphere-container \
            -p 80:3000 \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -e HOSTNAME=0.0.0.0 \
            -e NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Wait a moment for container to start
          sleep 5
          
          # Display container status and logs
          echo "Container status:"
          docker ps -a | grep cymasphere
          echo "Container logs:"
          docker logs cymasphere-container
          
          # Check content of the container
          echo "Files in container:"
          docker exec cymasphere-container ls -la /app
          echo "Next.js files:"
          docker exec cymasphere-container ls -la /app/.next || echo "No .next directory!"
          echo "Checking for start.sh:"
          docker exec cymasphere-container cat /app/start.sh || echo "No start.sh file!"
          
          # Verify the container is running correctly
          if ! curl -s http://localhost:80 | grep -q "maintenance"; then
            echo "Website appears to be working correctly!"
          else
            echo "Maintenance page detected! Attempting to fix..."
            # Try restarting the container
            docker restart cymasphere-container
            sleep 5
            # If still showing maintenance page, try running Next.js directly
            if curl -s http://localhost:80 | grep -q "maintenance"; then
              echo "Still showing maintenance page. Trying to run Next.js directly..."
              docker exec -d cymasphere-container bash -c "cd /app && bun run next start -p 3000"
            fi
          fi
          
          # Clean up
          docker system prune -af --volumes
          EOL
          
          chmod +x deploy_remote.sh

      - name: Deploy to Lightsail
        run: |
          # Test SSH connection first
          ssh -v -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIGHTSAIL_IP }} "echo SSH Connection Successful"
          
          # If connection successful, copy and run deployment script
          scp -o StrictHostKeyChecking=no deploy_remote.sh ubuntu@${{ secrets.LIGHTSAIL_IP }}:~/deploy.sh
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIGHTSAIL_IP }} "chmod +x ~/deploy.sh && ~/deploy.sh"
          
      - name: Verify deployment
        run: |
          # Check if the site is reachable
          echo "Verifying if site is accessible..."
          if curl -s --head --fail http://${{ secrets.LIGHTSAIL_IP }}; then
            echo "Site is accessible. Deployment successful!"
          else
            echo "Site is not accessible. Please check the server logs."
            exit 1
          fi 