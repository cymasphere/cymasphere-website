# version 1
name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main # Trigger deployment on push to main branch
  workflow_dispatch: # Allow manual triggering from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.LIGHTSAIL_SSH_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.15.1"

      - name: Set npm version
        run: npm install -g npm@10.9.2

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.13

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: bun install

      - name: Build application
        env:
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_PRICE_ID_MONTHLY: ${{ secrets.STRIPE_PRICE_ID_MONTHLY }}
          STRIPE_PRICE_ID_ANNUAL: ${{ secrets.STRIPE_PRICE_ID_ANNUAL }}
          STRIPE_PRICE_ID_LIFETIME: ${{ secrets.STRIPE_PRICE_ID_LIFETIME }}
        run: bun run build

      - name: Configure SSH
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # SSH configuration
          cat >> ~/.ssh/config << EOF
          Host $LIGHTSAIL_HOST
            User $LIGHTSAIL_USER
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            ConnectTimeout 30
            ServerAliveInterval 30
            ServerAliveCountMax 3
          EOF

      - name: Stop running application
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Stop the current application
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "pm2 stop cymasphere || true"

      - name: Copy files to server
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Create directories if they don't exist
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "mkdir -p ~/cymasphere/.next ~/cymasphere/public"

          # Copy application files with proper directory structure
          rsync -avz --delete -e "ssh -o ConnectTimeout=60" \
            .next/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/.next/

          rsync -avz --delete -e "ssh -o ConnectTimeout=60" \
            public/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/public/

          # Copy package.json and other config files
          scp package.json $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/

          # Create environment file
          echo "NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}" > .env.production
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.production
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" >> .env.production
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env.production
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env.production
          echo "STRIPE_PRICE_ID_MONTHLY=${{ secrets.STRIPE_PRICE_ID_MONTHLY }}" >> .env.production
          echo "STRIPE_PRICE_ID_ANNUAL=${{ secrets.STRIPE_PRICE_ID_ANNUAL }}" >> .env.production
          echo "STRIPE_PRICE_ID_LIFETIME=${{ secrets.STRIPE_PRICE_ID_LIFETIME }}" >> .env.production
          scp .env.production $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/

          # Copy next.config.js if it exists
          if [ -f "next.config.js" ]; then
            scp next.config.js $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/
          fi

      - name: Install dependencies on server
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Install dependencies
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "cd ~/cymasphere && bun install"

      - name: Start application
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Check if process exists in PM2 and start/restart accordingly
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "cd ~/cymasphere && source ~/.nvm/nvm.sh && pm2 describe cymasphere > /dev/null 2>&1 && pm2 restart cymasphere || pm2 start bun --name 'cymasphere' -- start"
