name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install dependencies without building native modules
          npm ci --ignore-scripts
          # Install necessary build tools
          sudo apt-get update && sudo apt-get install -y build-essential python3
          # Downgrade to TailwindCSS 3.x which doesn't have the lightningcss dependency
          npm uninstall tailwindcss @tailwindcss/postcss
          npm install tailwindcss@3.3.5 postcss@8.4.31 autoprefixer@10.4.16
        env:
          # Skip native module installation for lightningcss
          LIGHTNINGCSS_SKIP_NATIVE_INSTALL: "1"

      - name: Create temporary CSS fix
        run: |
          # Install the WASM version which works cross-platform
          npm install lightningcss-wasm
          # Directly replace the problematic module with WASM version
          mkdir -p node_modules/lightningcss-override
          echo 'module.exports = require("lightningcss-wasm");' > node_modules/lightningcss-override/index.js
          # Update the package.json to use our override
          echo "module.exports = require('lightningcss-wasm');" > node_modules/lightningcss/node/index.js
          
          # Create postcss.config.js for TailwindCSS 3.x
          cat > postcss.config.js << EOL
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOL
          
          # Create a simplified tailwind.config.js for TailwindCSS 3.x
          cat > tailwind.config.js << EOL
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              './app/**/*.{js,ts,jsx,tsx,mdx}',
              './pages/**/*.{js,ts,jsx,tsx,mdx}',
              './components/**/*.{js,ts,jsx,tsx,mdx}',
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }
          EOL

      - name: Build Next.js application
        run: npm run build
        env:
          # Add any required environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set lowercase repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Dockerfile for Next.js
        run: |
          cat > Dockerfile << EOL
          FROM node:19-alpine AS base

          # Install dependencies only when needed
          FROM base AS deps
          RUN apk add --no-cache libc6-compat python3 make g++
          WORKDIR /app
          COPY package.json package-lock.json* ./
          # Install dependencies without native modules
          RUN npm ci --ignore-scripts
          # Use TailwindCSS 3.x instead of 4.x to avoid lightningcss issues
          RUN npm uninstall tailwindcss @tailwindcss/postcss
          RUN npm install tailwindcss@3.3.5 postcss@8.4.31 autoprefixer@10.4.16

          # Rebuild the source code only when needed
          FROM base AS builder
          WORKDIR /app
          COPY --from=deps /app/node_modules ./node_modules
          COPY . .
          # Set environment variable to use JS implementation instead of native
          ENV LIGHTNINGCSS_SKIP_NATIVE_INSTALL=1
          RUN npm run build

          # Production image, copy all the files and run next
          FROM base AS runner
          WORKDIR /app

          ENV NODE_ENV production

          RUN addgroup --system --gid 1001 nodejs
          RUN adduser --system --uid 1001 nextjs

          COPY --from=builder /app/public ./public
          COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
          COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

          USER nextjs

          EXPOSE 3000

          ENV PORT 3000
          ENV HOSTNAME "0.0.0.0"

          CMD ["node", "server.js"]
          EOL

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Create config file to disable strict host checking
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Create deploy script
          cat > deploy.sh << EOL
          #!/bin/bash
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \$VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
          fi
          
          # Ensure the ubuntu user is in the docker group and permissions are correct
          sudo usermod -aG docker ubuntu
          sudo chmod 666 /var/run/docker.sock
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Stop and remove any existing container
          docker stop cymasphere-container || true
          docker rm cymasphere-container || true
          
          # Run the new container
          docker run -d --restart unless-stopped --name cymasphere-container -p 80:3000 ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Clean up
          docker system prune -af
          EOL
          
          chmod +x deploy.sh

      - name: Deploy to Lightsail
        run: |
          # Try SCP and SSH
          scp deploy.sh ubuntu@${{ secrets.LIGHTSAIL_IP }}:~/deploy.sh
          ssh ubuntu@${{ secrets.LIGHTSAIL_IP }} "chmod +x ~/deploy.sh && ~/deploy.sh" 