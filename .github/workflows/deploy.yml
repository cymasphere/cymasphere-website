name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
      
      - name: Create .env.local file for build
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.local
        
      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "App directory:"
          ls -la app || echo "App directory not found!"

      - name: Make build script executable
        run: chmod +x ./build-local.sh
        
      - name: Run enhanced build script
        run: ./build-local.sh
        env:
          # Add any required environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          # Skip TypeScript errors during build
          NEXT_SKIP_TYPECHECKING: true
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set lowercase repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create server.js file
        run: |
          cat > server.js << 'EOL'
          // Enhanced Next.js server loader with better debugging
          const fs = require('fs');
          const path = require('path');
          const http = require('http');
          const { execSync } = require('child_process');

          try {
            // Log environment for debugging
            console.log('NODE_ENV:', process.env.NODE_ENV);
            console.log('Working directory:', process.cwd());
            
            try {
              console.log('Directory contents:', fs.readdirSync('.'));
            } catch (e) {
              console.error('Failed to read directory contents:', e.message);
            }

            // Try to get system info
            try {
              console.log('System info:');
              console.log(execSync('uname -a').toString());
              console.log('Memory:', execSync('free -m').toString());
              console.log('Disk space:', execSync('df -h').toString());
            } catch (e) {
              console.error('Error getting system info:', e.message);
            }

            // Check if key Next.js files exist
            const checkPaths = [
              './node_modules/next',
              './.next',
              './.next/server',
              './.next/standalone',
              './server.js',
              './package.json'
            ];

            checkPaths.forEach(p => {
              try {
                console.log(`Checking ${p}: ${fs.existsSync(p) ? 'EXISTS' : 'MISSING'}`);
                if (fs.existsSync(p) && fs.statSync(p).isDirectory()) {
                  try {
                    console.log(`  Contents of ${p}: ${fs.readdirSync(p).join(', ')}`);
                  } catch (e) {
                    console.error(`  Error reading contents of ${p}:`, e.message);
                  }
                }
              } catch (e) {
                console.error(`Error checking path ${p}:`, e.message);
              }
            });

            // Various paths where Next.js server might be located
            const possibleNextPaths = [
              './node_modules/next/dist/server/next-server.js',
              './.next/server/app/server.js',
              './.next/standalone/server.js',
              './server.js'
            ];

            // Try to load Next.js from various possible locations
            let nextLoaded = false;
            for (const nextPath of possibleNextPaths) {
              try {
                console.log(`Attempting to load Next.js from: ${nextPath}`);
                if (fs.existsSync(nextPath)) {
                  // For the standalone mode specifically
                  if (nextPath === './.next/standalone/server.js') {
                    console.log('Found standalone server.js, executing it directly');
                    try {
                      // Directly execute the standalone server code
                      require('./.next/standalone/server.js');
                      console.log('Successfully loaded standalone server.js');
                      nextLoaded = true;
                      break;
                    } catch (e) {
                      console.error(`Error executing standalone server.js: ${e.message}`);
                      console.error(e.stack);
                    }
                  } else {
                    // For standard Next.js server modules
                    try {
                      require(nextPath);
                      console.log('Successfully loaded Next.js from:', nextPath);
                      nextLoaded = true;
                      break;
                    } catch (e) {
                      console.error(`Error requiring ${nextPath}: ${e.message}`);
                      console.error(e.stack);
                    }
                  }
                } else {
                  console.log(`Path ${nextPath} doesn't exist`);
                }
              } catch (e) {
                console.error(`Error loading Next.js from ${nextPath}:`, e.message);
                console.error(e.stack);
              }
            }

            // If Next.js failed to load, try to find any server.js alternative
            if (!nextLoaded) {
              try {
                console.log('Searching for any server.js files in the filesystem...');
                const findResults = execSync('find / -name "server.js" 2>/dev/null || true').toString();
                console.log('Found server.js files:', findResults);
              } catch (e) {
                console.error('Error searching for server.js files:', e.message);
              }
              
              // Try to see what's in node_modules
              try {
                if (fs.existsSync('./node_modules')) {
                  console.log('Top level node_modules contents:', fs.readdirSync('./node_modules').join(', '));
                  if (fs.existsSync('./node_modules/next')) {
                    console.log('next module contents:', fs.readdirSync('./node_modules/next').join(', '));
                    if (fs.existsSync('./node_modules/next/dist')) {
                      console.log('next/dist contents:', fs.readdirSync('./node_modules/next/dist').join(', '));
                    }
                  }
                }
              } catch (e) {
                console.error('Error exploring node_modules:', e.message);
              }
            }

            // If Next.js failed to load, start a simple HTTP server
            if (!nextLoaded) {
              console.log('Starting fallback HTTP server on port 3000');
              http.createServer((req, res) => {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(`
                  <html>
                    <head><title>Next.js App Unavailable</title>
                    <style>
                      body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
                      pre { background: #f4f4f4; padding: 10px; border-radius: 5px; overflow: auto; }
                      h1 { color: #d32f2f; }
                      h2 { color: #333; margin-top: 30px; }
                    </style>
                    </head>
                    <body>
                      <h1>Server is running</h1>
                      <h2>Next.js app is not available</h2>
                      <p>The server is running but the Next.js application failed to load.</p>
                      
                      <h2>Debugging Information:</h2>
                      <pre>
NODE_ENV: ${process.env.NODE_ENV}
Working Directory: ${process.cwd()}
Directory Contents: ${
  (() => {
    try {
      return fs.readdirSync('.').join(', ');
    } catch (e) {
      return 'Error reading directory: ' + e.message;
    }
  })()
}

Checked Paths:
${
  (() => {
    try {
      return checkPaths.map(p => {
        try {
          return `${p}: ${fs.existsSync(p) ? 'EXISTS' : 'MISSING'}`;
        } catch (e) {
          return `${p}: ERROR - ${e.message}`;
        }
      }).join('\n');
    } catch (e) {
      return 'Error checking paths: ' + e.message;
    }
  })()
}

Attempted Next.js Paths:
${possibleNextPaths.join('\n')}
                      </pre>
                      
                      <h2>Possible Solutions:</h2>
                      <ol>
                        <li>Check if the Next.js build completed successfully</li>
                        <li>Verify the output directory structure matches what the server expects</li>
                        <li>Ensure all required environment variables are set</li>
                        <li>Check the container logs for more detailed error information</li>
                      </ol>
                    </body>
                  </html>
                `);
              }).listen(3000, '0.0.0.0');
            }
          } catch (e) {
            console.error("CRITICAL ERROR IN SERVER.JS:", e);
            
            // Last resort emergency server
            try {
              http.createServer((req, res) => {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(`
                  <html>
                    <head><title>Emergency Server</title></head>
                    <body>
                      <h1>Emergency Server Running</h1>
                      <p>The main server script encountered a critical error.</p>
                      <pre>${e.stack || e.toString()}</pre>
                    </body>
                  </html>
                `);
              }).listen(3000, '0.0.0.0');
              console.log("Emergency server started on port 3000");
            } catch (emergencyError) {
              console.error("FAILED TO START EMERGENCY SERVER:", emergencyError);
            }
          }
          EOL

      - name: Create Dockerfile for Next.js
        run: |
          cat > Dockerfile << 'DOCKERFILE_EOF'
          FROM oven/bun:1 as base

          # Install dependencies only when needed
          FROM base AS deps
          WORKDIR /app
          COPY package.json bun.lock ./
          RUN bun install --frozen-lockfile

          # Rebuild the source code only when needed
          FROM base AS builder
          WORKDIR /app
          COPY --from=deps /app/node_modules ./node_modules
          COPY . .
          
          # Setup environment variables for build
          ENV NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          # Skip TypeScript errors during build
          ENV NEXT_SKIP_TYPECHECKING=true
          # Skip ESLint during build
          ENV NEXT_LINT=false
          
          # Use our custom build script
          RUN chmod +x ./build-local.sh
          RUN ./build-local.sh

          # Create a simple script to check and list files
          RUN echo '#!/bin/sh' > /app/list_files.sh && \
              echo 'echo "Files in public:" && ls -la /app/public/ || echo "No public directory"' >> /app/list_files.sh && \
              echo 'echo "Files in .next:" && ls -la /app/.next/ || echo "No .next directory"' >> /app/list_files.sh && \
              echo 'echo "Files in .next/standalone:" && ls -la /app/.next/standalone/ || echo "No standalone directory"' >> /app/list_files.sh && \
              echo 'echo "Files in .next/static:" && ls -la /app/.next/static/ || echo "No static directory"' >> /app/list_files.sh && \
              echo 'echo "Files in .next/server/pages:" && ls -la /app/.next/server/pages/ || echo "No pages directory"' >> /app/list_files.sh && \
              chmod +x /app/list_files.sh

          # Run it to debug what files actually exist
          RUN /app/list_files.sh

          # Production image, copy all the files and run next
          FROM base AS runner
          WORKDIR /app

          ENV NODE_ENV production

          # Create all required directories
          RUN mkdir -p /app/.next/static && \
              mkdir -p /app/.next/server/pages && \
              mkdir -p /app/public && \
              mkdir -p /app/server/pages
          
          # Create default files for the server
          RUN echo "<html><body><h1>Server Error (500)</h1></body></html>" > /app/server/pages/500.html && \
              echo "<html><body><h1>Not Found (404)</h1></body></html>" > /app/server/pages/404.html

          # Copy the server.js file from the build context
          COPY server.js /app/server.js

          # Create a script to safely copy files between stages
          # Copy server.js from builder if it exists (using shell copy instead of COPY)
          RUN echo '#!/bin/sh' > /tmp/copy_files.sh && \
              echo 'echo "Copying files from builder to runner..."' >> /tmp/copy_files.sh && \
              echo '[ -d "/builder/app/public" ] && cp -r /builder/app/public/* /app/public/ || echo "No public directory to copy"' >> /tmp/copy_files.sh && \
              echo '[ -d "/builder/app/.next/standalone" ] && cp -r /builder/app/.next/standalone/* /app/ || echo "No standalone directory to copy"' >> /tmp/copy_files.sh && \
              echo '[ -d "/builder/app/.next/static" ] && mkdir -p /app/.next/static && cp -r /builder/app/.next/static/* /app/.next/static/ || echo "No static directory to copy"' >> /tmp/copy_files.sh && \
              echo '[ -f "/builder/app/.next/server/pages/500.html" ] && cp /builder/app/.next/server/pages/500.html /app/server/pages/500.html || echo "No 500.html to copy"' >> /tmp/copy_files.sh && \
              echo '[ -f "/builder/app/.next/server/pages/404.html" ] && cp /builder/app/.next/server/pages/404.html /app/server/pages/404.html || echo "No 404.html to copy"' >> /tmp/copy_files.sh && \
              echo '[ -f "/builder/app/server.js" ] && cp /builder/app/server.js /app/server.js || echo "No server.js to copy"' >> /tmp/copy_files.sh && \
              echo 'echo "Files successfully copied!"' >> /tmp/copy_files.sh && \
              chmod +x /tmp/copy_files.sh

          # Use a helper container to copy files
          COPY --from=builder / /builder/
          RUN /tmp/copy_files.sh

          # Create a startup script that logs environment before starting
          RUN echo '#!/bin/sh' > /app/start.sh && \
              echo 'echo "Starting container with NODE_ENV=$NODE_ENV"' >> /app/start.sh && \
              echo 'echo "Working directory: $(pwd)"' >> /app/start.sh && \
              echo 'echo "Files in current directory:"' >> /app/start.sh && \
              echo 'ls -la' >> /app/start.sh && \
              echo 'echo "Running: bun server.js"' >> /app/start.sh && \
              echo 'exec bun server.js' >> /app/start.sh && \
              chmod +x /app/start.sh

          # Fix any potential permission issues
          RUN chmod -R 755 /app

          EXPOSE 3000

          ENV PORT 3000
          ENV HOSTNAME "0.0.0.0"

          # Use sh not bun directly to ensure proper output
          CMD ["/bin/sh", "/app/start.sh"]
          DOCKERFILE_EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Create config file to disable strict host checking
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Create deploy script
          cat > deploy.sh << EOL
          #!/bin/bash
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \$VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
          fi
          
          # Ensure the ubuntu user is in the docker group and permissions are correct
          sudo usermod -aG docker ubuntu
          sudo chmod 666 /var/run/docker.sock
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Stop and remove any existing container
          docker stop cymasphere-container || true
          docker rm cymasphere-container || true
          
          # Run the new container
          docker run -d --restart unless-stopped --name cymasphere-container -p 80:3000 ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Wait a moment for container to start
          echo "Waiting for container to initialize..."
          sleep 5
          
          # Copy the server.js into the container just in case
          if [ -f ~/server.js ]; then
            echo "Copying server.js into container..."
            docker cp ~/server.js cymasphere-container:/app/server.js || echo "Failed to copy server.js - continuing anyway"
            
            # Add debugging to see container status
            echo "Container status:"
            docker ps -a | grep cymasphere
            
            echo "Container logs:"
            docker logs cymasphere-container
            
            # Create a debug script to run inside the container
            cat > ~/debug.sh << 'EOF'
            #!/bin/sh
            echo "Container filesystem:"
            ls -la /app
            echo "Node modules:"
            ls -la /app/node_modules || echo "No node_modules directory"
            echo "Next.js output:"
            ls -la /app/.next || echo "No .next directory"
            EOF
            
            # Try to run debug script in container - but don't fail if it doesn't work
            docker cp ~/debug.sh cymasphere-container:/app/debug.sh || echo "Failed to copy debug script"
            docker exec cymasphere-container sh /app/debug.sh || echo "Failed to run debug script"
            
            # Restart container in case permissions need refreshing
            echo "Restarting container..."
            docker restart cymasphere-container || echo "Failed to restart container"
          fi
          
          # Clean up
          docker system prune -af
          EOL
          
          chmod +x deploy.sh

      - name: Deploy to Lightsail
        run: |
          # Copy the server.js file to the server for debugging
          scp server.js ubuntu@${{ secrets.LIGHTSAIL_IP }}:~/server.js
          # Try SCP and SSH
          scp deploy.sh ubuntu@${{ secrets.LIGHTSAIL_IP }}:~/deploy.sh
          ssh ubuntu@${{ secrets.LIGHTSAIL_IP }} "chmod +x ~/deploy.sh && ~/deploy.sh" 