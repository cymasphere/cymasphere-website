# version 1
name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main # Trigger deployment on push to main branch
  workflow_dispatch: # Allow manual triggering from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies and Next.js build
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}-

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.LIGHTSAIL_SSH_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.15.1"

      - name: Set npm version
        run: npm install -g npm@10.9.2

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.13

      - name: Install dependencies
        run: bun install

      - name: Install dependencies (skip build for dev)
        env:
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_PRICE_ID_MONTHLY: ${{ secrets.STRIPE_PRICE_ID_MONTHLY }}
          STRIPE_PRICE_ID_ANNUAL: ${{ secrets.STRIPE_PRICE_ID_ANNUAL }}
          STRIPE_PRICE_ID_LIFETIME: ${{ secrets.STRIPE_PRICE_ID_LIFETIME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          # --- Additional variables below ---
          PUBLIC_URL: ${{ secrets.PUBLIC_URL || '' }}
          REACT_APP_STRIPE_PUBLISHABLE_KEY: ${{ secrets.REACT_APP_STRIPE_PUBLISHABLE_KEY || '' }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || '' }}
          FACEBOOK_MOCK_CONNECTION: ${{ secrets.FACEBOOK_MOCK_CONNECTION || '' }}
          FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID || '' }}
          FACEBOOK_APP_SECRET: ${{ secrets.FACEBOOK_APP_SECRET || '' }}
          FACEBOOK_AD_ACCOUNT_ID: ${{ secrets.FACEBOOK_AD_ACCOUNT_ID || '' }}
          AUTOMATION_TEST_EMAIL_OVERRIDE: ${{ secrets.AUTOMATION_TEST_EMAIL_OVERRIDE || '' }}
          SCHEDULER_CRON: ${{ secrets.SCHEDULER_CRON || '' }}
          ENABLE_SCHEDULER: ${{ secrets.ENABLE_SCHEDULER || '' }}
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL || '' }}
          NODE_ENV: development
        run: echo "Skipping build for development deployment"

      - name: Configure SSH
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # SSH configuration
          cat >> ~/.ssh/config << EOF
          Host $LIGHTSAIL_HOST
            User $LIGHTSAIL_USER
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            ConnectTimeout 30
            ServerAliveInterval 30
            ServerAliveCountMax 3
          EOF

      - name: Stop running application
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Stop the current application with proper Node.js environment
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "bash -l -c 'source ~/.nvm/nvm.sh && export PATH=\$(npm bin -g):\$PATH && pm2 stop cymasphere || true'"

      - name: Copy files to server
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Create directories if they don't exist with proper structure
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "mkdir -p ~/cymasphere/public ~/cymasphere/app ~/cymasphere/utils ~/cymasphere/contexts ~/cymasphere/components ~/cymasphere/hooks ~/cymasphere/types ~/cymasphere/styles"

          # Copy public directory with all subdirectories, preserve permissions, and only transfer changed files
          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            public/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/public/

          # Copy source code directories (critical for server-side code changes)
          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            app/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/app/

          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            utils/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/utils/

          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            contexts/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/contexts/

          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            components/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/components/

          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            hooks/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/hooks/

          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            types/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/types/

          rsync -avz --delete --checksum --partial --compress-level=6 --recursive --perms --times -e "ssh -o ConnectTimeout=60" \
            styles/ $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/styles/

          # Verify public directory structure was copied correctly
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "ls -la ~/cymasphere/public/"

          # Copy package.json and other config files only if changed
          rsync -avz --checksum -e "ssh -o ConnectTimeout=60" \
            package.json $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/

          rsync -avz --checksum -e "ssh -o ConnectTimeout=60" \
            bun.lock $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/

          # Create environment file for development
          echo "NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}" > .env.development
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.development
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.development
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.development
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" >> .env.development
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env.development
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env.development
          echo "STRIPE_PRICE_ID_MONTHLY=${{ secrets.STRIPE_PRICE_ID_MONTHLY }}" >> .env.development
          echo "STRIPE_PRICE_ID_ANNUAL=${{ secrets.STRIPE_PRICE_ID_ANNUAL }}" >> .env.development
          echo "STRIPE_PRICE_ID_LIFETIME=${{ secrets.STRIPE_PRICE_ID_LIFETIME }}" >> .env.development
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.development
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.development
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env.development
          echo "CRON_SECRET=${{ secrets.CRON_SECRET }}" >> .env.development
          # --- Additional variables below ---
          echo "PUBLIC_URL=${{ secrets.PUBLIC_URL }}" >> .env.development
          echo "REACT_APP_STRIPE_PUBLISHABLE_KEY=${{ secrets.REACT_APP_STRIPE_PUBLISHABLE_KEY }}" >> .env.development
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" >> .env.development
          echo "FACEBOOK_MOCK_CONNECTION=${{ secrets.FACEBOOK_MOCK_CONNECTION }}" >> .env.development
          echo "FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}" >> .env.development
          echo "FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}" >> .env.development
          echo "FACEBOOK_AD_ACCOUNT_ID=${{ secrets.FACEBOOK_AD_ACCOUNT_ID }}" >> .env.development
          echo "AUTOMATION_TEST_EMAIL_OVERRIDE=${{ secrets.AUTOMATION_TEST_EMAIL_OVERRIDE }}" >> .env.development
          echo "SCHEDULER_CRON=${{ secrets.SCHEDULER_CRON }}" >> .env.development
          echo "ENABLE_SCHEDULER=${{ secrets.ENABLE_SCHEDULER }}" >> .env.development
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> .env.development
          echo "NODE_ENV=development" >> .env.development

          # Copy environment file only if changed
          rsync -avz --checksum -e "ssh -o ConnectTimeout=60" \
            .env.development $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/

          # Copy next.config.js if it exists and has changed
          if [ -f "next.config.js" ]; then
            rsync -avz --checksum -e "ssh -o ConnectTimeout=60" \
              next.config.js $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/
          fi

          # Copy next.config.ts if it exists and has changed
          if [ -f "next.config.ts" ]; then
            rsync -avz --checksum -e "ssh -o ConnectTimeout=60" \
              next.config.ts $LIGHTSAIL_USER@$LIGHTSAIL_HOST:~/cymasphere/
          fi

      - name: Install dependencies on server
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Install dependencies with nvm sourcing and npm global bin path
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "bash -l -c 'source ~/.nvm/nvm.sh && cd ~/cymasphere && export PATH=\$(npm bin -g):\$PATH && bun install'"

      - name: Start application
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Start application with nvm sourcing and npm global bin path
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "bash -l -c 'source ~/.nvm/nvm.sh && cd ~/cymasphere && export PATH=\$(npm bin -g):\$PATH && pm2 describe cymasphere > /dev/null 2>&1 && pm2 restart cymasphere || pm2 start bun --name \"cymasphere\" -- run dev'"

      - name: Verify deployment
        env:
          LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
          LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          # Wait a moment for the application to start
          sleep 10
          
          # Check if the application is running
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "bash -l -c 'source ~/.nvm/nvm.sh && export PATH=\$(npm bin -g):\$PATH && pm2 status'"
          
          # Check if the updated code is present
          ssh $LIGHTSAIL_USER@$LIGHTSAIL_HOST "ls -la ~/cymasphere/utils/supabase/actions.ts"
          
          # Test server response
          curl -f ${{ secrets.NEXT_PUBLIC_SITE_URL }} || echo "Server not responding yet"
