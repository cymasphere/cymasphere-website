name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
      
      - name: Create .env.local file for build
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.local
        
      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "App directory:"
          ls -la app || echo "App directory not found!"

      - name: Make build script executable
        run: chmod +x ./build-local.sh
        
      - name: Run enhanced build script
        run: ./build-local.sh
        env:
          # Add any required environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          # Skip TypeScript errors during build
          NEXT_SKIP_TYPECHECKING: true
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set lowercase repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create server.js with diagnostic capabilities
        run: |
          cat > server.js << 'EOFJS'
          try {
            const fs = require("fs");
            const http = require("http");
            const path = require("path");
            
            console.log("Server starting, NODE_ENV:", process.env.NODE_ENV);
            console.log("Working directory:", process.cwd());
            
            // Start a basic HTTP server that will always work
            const server = http.createServer((req, res) => {
              res.writeHead(200, {"Content-Type": "text/html"});
              res.end(`
                <html>
                  <head>
                    <title>Next.js Server</title>
                    <style>
                      body { font-family: sans-serif; max-width: 800px; margin: 20px auto; padding: 20px; }
                      h1 { color: #0070f3; }
                      pre { background: #f7fafc; padding: 15px; border-radius: 5px; overflow: auto; }
                    </style>
                  </head>
                  <body>
                    <h1>Next.js Diagnostic Server</h1>
                    <p>Basic server is running. Checking Next.js status...</p>
                    <pre id="status">Checking server status...</pre>
                    
                    <script>
                      // Wait 3 seconds to allow server to initialize
                      setTimeout(() => {
                        document.getElementById("status").textContent = 
                          "Full diagnostic information available in container logs. " +
                          "Run: docker logs cymasphere-container";
                      }, 3000);
                    </script>
                  </body>
                </html>
              `);
            });
            
            server.listen(3000, "0.0.0.0", () => {
              console.log("Basic HTTP server started on port 3000");
            });
            
            // Try to check directory contents
            try {
              console.log("Directory contents:", fs.readdirSync("."));
            } catch (e) {
              console.error("Error reading directory:", e);
            }
            
          } catch (e) {
            console.error("CRITICAL SERVER ERROR:", e);
            require("http").createServer((req, res) => {
              res.writeHead(200, {"Content-Type": "text/html"});
              res.end("<html><body><h1>Emergency Server</h1><p>Error: " + e.message + "</p></body></html>");
            }).listen(3000, "0.0.0.0");
          }
          EOFJS

      - name: Create .dockerignore to ensure our diagnostic server.js isn't used
        run: |
          cat > .dockerignore << 'EOFDI'
          # Ignore our diagnostic server.js
          /server.js
          EOFDI

      - name: Create Dockerfile for Next.js
        run: |
          cat > Dockerfile << 'DOCKERFILE_EOF'
          FROM oven/bun:1 as base

          # Install dependencies only when needed
          FROM base AS deps
          WORKDIR /app
          COPY package.json bun.lock ./
          RUN bun install --frozen-lockfile

          # Rebuild the source code only when needed
          FROM base AS builder
          WORKDIR /app
          COPY --from=deps /app/node_modules ./node_modules
          COPY . .
          
          # Setup environment variables for build
          ENV NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          # Skip TypeScript errors during build
          ENV NEXT_SKIP_TYPECHECKING=true
          ENV NEXT_TELEMETRY_DISABLED=1
          # Skip ESLint during build
          ENV NEXT_LINT=false
          
          # Debug package.json
          RUN cat package.json
          
          # Use the standard Next.js build with proper error handling
          RUN bun run build || bunx next build
          
          # Create a complete standalone directory
          RUN mkdir -p /app/.next/standalone/public
          RUN cp -R /app/.next/static /app/.next/standalone/.next/ || mkdir -p /app/.next/standalone/.next/static

          # Production image, copy all the files and run next
          FROM base AS runner
          WORKDIR /app

          ENV NODE_ENV production
          ENV NEXT_TELEMETRY_DISABLED=1
          ENV NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

          # Create all required directories
          RUN mkdir -p /app/public
          
          # Copy the standalone output
          COPY --from=builder /app/.next/standalone ./
          COPY --from=builder /app/.next/static ./.next/static

          # Create a simple start script
          RUN echo '#!/bin/sh' > /app/start.sh && \
              echo 'echo "Starting Next.js standalone server..."' >> /app/start.sh && \
              echo 'echo "Environment: NODE_ENV=$NODE_ENV"' >> /app/start.sh && \
              echo 'echo "Working directory: $(pwd)"' >> /app/start.sh && \
              echo 'echo "Directory contents:"' >> /app/start.sh && \
              echo 'ls -la' >> /app/start.sh && \
              echo 'echo "Node.js version: $(node -v)"' >> /app/start.sh && \
              echo 'echo "Bun version: $(bun -v)"' >> /app/start.sh && \
              echo 'echo ".next directory:"' >> /app/start.sh && \
              echo 'ls -la .next || echo "No .next directory"' >> /app/start.sh && \
              echo 'if [ -f "server.js" ]; then' >> /app/start.sh && \
              echo '  echo "Starting Next.js server..."' >> /app/start.sh && \
              echo '  node server.js' >> /app/start.sh && \
              echo 'else' >> /app/start.sh && \
              echo '  echo "server.js not found, starting diagnostic server..."' >> /app/start.sh && \
              echo '  node -e "require(\"http\").createServer((req, res) => { res.end(\"Next.js server.js not found\"); }).listen(3000)"' >> /app/start.sh && \
              echo 'fi' >> /app/start.sh && \
              chmod +x /app/start.sh

          EXPOSE 3000
          ENV PORT 3000
          ENV HOSTNAME "0.0.0.0"

          # Use node not bun to run the Next.js standalone server
          CMD ["/bin/sh", "/app/start.sh"]
          DOCKERFILE_EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Create config file to disable strict host checking
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Create deploy script
          cat > deploy.sh << EOL
          #!/bin/bash
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \$VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
          fi
          
          # Ensure the ubuntu user is in the docker group and permissions are correct
          sudo usermod -aG docker ubuntu
          sudo chmod 666 /var/run/docker.sock
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Stop and remove any existing container
          docker stop cymasphere-container || true
          docker rm cymasphere-container || true
          
          # Run the new container
          echo "Starting container..."
          docker run -d --restart unless-stopped --name cymasphere-container \
            -p 80:3000 \
            -e NODE_ENV=production \
            -e NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Wait a moment for container to start
          echo "Waiting for container to initialize..."
          sleep 5
          
          # Check container status regardless of server.js file existence
          echo "Container status:"
          docker ps -a | grep cymasphere
          
          # Check container logs even if it fails
          echo "Container logs:"
          docker logs cymasphere-container || echo "Failed to get container logs"
          
          # Try running in interactive mode if container is not running
          CONTAINER_RUNNING=$(docker ps --filter "name=cymasphere-container" --format "{{.Names}}" | wc -l)
          if [ "$CONTAINER_RUNNING" -eq "0" ]; then
            echo "Container is not running. Trying to start in foreground for debugging..."
            echo "Removing failed container..."
            docker rm cymasphere-container || true
            echo "Running with interactive output..."
            # Run in foreground with output directed to console
            docker run --name cymasphere-container-debug \
              -p 80:3000 \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
              -e NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
              -e DEBUG=1 \
              ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest || echo "Container failed to start in interactive mode too"
          fi
          
          # Clean up
          docker system prune -af
          EOL
          
          chmod +x deploy.sh

      - name: Deploy to Lightsail
        run: |
          # Copy the server.js file to the server for debugging
          scp server.js ubuntu@${{ secrets.LIGHTSAIL_IP }}:~/server.js
          # Try SCP and SSH
          scp deploy.sh ubuntu@${{ secrets.LIGHTSAIL_IP }}:~/deploy.sh
          ssh ubuntu@${{ secrets.LIGHTSAIL_IP }} "chmod +x ~/deploy.sh && ~/deploy.sh" 