name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install without binary dependencies
          npm ci --omit=optional
          # Force install lightningcss for the current platform
          npm install --no-save lightningcss@latest
        env:
          LIGHTNINGCSS_SKIP_NATIVE_INSTALL: "0"
          npm_config_platform: "linux"
          npm_config_arch: "x64"

      - name: Create temporary workaround for CSS
        run: |
          # Create a simplified next.config.js for build
          cat > next.config.mjs << EOL
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            output: 'standalone',
            // Disable Tailwind JIT to work around lightningcss issues
            experimental: {
              optimizeCss: false
            },
            webpack: (config) => {
              // Replace lightningcss with a simple pass-through for this build
              config.resolve.alias = {
                ...config.resolve.alias,
                'lightningcss': require.resolve('postcss')
              };
              return config;
            }
          };
          
          export default nextConfig;
          EOL
          mv next.config.mjs next.config.js

      - name: Build Next.js application
        run: npm run build
        env:
          # Add any required environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set lowercase repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Dockerfile for Next.js
        run: |
          cat > Dockerfile << EOL
          FROM node:19-alpine AS base

          # Production image, copy all the files from the build
          WORKDIR /app

          ENV NODE_ENV production

          RUN addgroup --system --gid 1001 nodejs
          RUN adduser --system --uid 1001 nextjs

          # Copy the pre-built standalone Next.js app
          COPY .next/standalone ./
          COPY .next/static ./.next/static
          COPY public ./public

          USER nextjs

          EXPOSE 3000

          ENV PORT 3000
          ENV HOSTNAME "0.0.0.0"

          CMD ["node", "server.js"]
          EOL

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Create config file to disable strict host checking
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Create deploy script
          cat > deploy.sh << EOL
          #!/bin/bash
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \$VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
          fi
          
          # Ensure the ubuntu user is in the docker group and permissions are correct
          sudo usermod -aG docker ubuntu
          sudo chmod 666 /var/run/docker.sock
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Stop and remove any existing container
          docker stop cymasphere-container || true
          docker rm cymasphere-container || true
          
          # Run the new container
          docker run -d --restart unless-stopped --name cymasphere-container -p 80:3000 ghcr.io/${{ env.REPO_OWNER_LC }}/cymasphere-website:latest
          
          # Clean up
          docker system prune -af
          EOL
          
          chmod +x deploy.sh

      - name: Deploy to Lightsail
        run: |
          # Try SCP and SSH
          scp deploy.sh ubuntu@${{ secrets.LIGHTSAIL_IP }}:~/deploy.sh
          ssh ubuntu@${{ secrets.LIGHTSAIL_IP }} "chmod +x ~/deploy.sh && ~/deploy.sh" 